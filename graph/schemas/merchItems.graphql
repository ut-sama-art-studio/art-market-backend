type MerchItem {
    id: ID!
    ownerId: ID!
    name: String!
    description: String
    price: Float!
    inventory: Int
    type: String!
    width: Float
    height: Float
    unit: String
    images: [String]!
}

input NewMerch {
    name: String!
    description: String
    price: Float!
    inventory: Int
    type: String!
    width: Float
    height: Float
    unit: String
    images: [Upload!]!
}

input UpdateMerch {
    id: ID!
    name: String
    description: String
    price: Float
    inventory: Int
    type: String
    width: Float
    height: Float
    unit: String
    reorderedImage: [String]
    imagesToDelete: [String]
    newImages: [Upload!]
}

type MerchSearchResult {
    items: [MerchItem]!
    totalItems: Int!
    totalPages: Int!
    currentPage: Int!
    pageSize: Int!
}

extend type Mutation {
    createMerch(input: NewMerch!): MerchItem! @auth
    updateMerch(input: UpdateMerch!): MerchItem! @auth
    deleteMerch(id: ID!): Boolean! @auth
}

extend type Query {
    # merch(id: ID!): MerchItem!
    userMerchItems(userId: ID!): [MerchItem]!

    # search merch with pagination
    searchMerch(
        keyword: String
        type: String
        minPrice: Float # inclusive
        maxPrice: Float # inclusive
        page: Int = 1
        pageSize: Int = 10
        sortBy: String = "name" # sql column name
        sortOrder: String = "asc" # asc or desc
    ): MerchSearchResult!
}
