package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"
	"log"

	"github.com/ut-sama-art-studio/art-market-backend/graph/model"
	"github.com/ut-sama-art-studio/art-market-backend/services/auth"
	"github.com/ut-sama-art-studio/art-market-backend/services/users"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.NewUser) (*model.User, error) {
	var user users.User
	user.Name = input.Name
	user.Email = input.Email

	// hash password before storing in DB
	passwordHash, err := auth.Hash(user.Password)
	if err != nil {
		log.Print("Error hashing password: ", err)
		return nil, err
	}
	user.Password = passwordHash

	userID, err := user.Insert()
	if err != nil {
		log.Print("Error creating user: ", err)
		return nil, err
	}
	return &model.User{ID: userID, Email: user.Email, Name: user.Name}, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input model.UpdateUser) (*model.User, error) {
	user, err := users.GetUserByID(id)
	if err != nil {
		log.Print("Error fetching user: ", err)
		return nil, err
	}
	// update
	if input.Name != nil {
		user.Name = *input.Name
	}
	if input.Email != nil {
		user.Email = *input.Email
	}
	if input.ProfilePicture != nil {
		user.ProfilePicture = input.ProfilePicture
	}
	if input.Bio != nil {
		user.Bio = input.Bio
	}
	if err = user.Update(); err != nil {
		log.Print("Error updating user: ", err)
		return nil, err
	}
	return &model.User{ID: user.ID, Name: user.Name, Email: user.Email, ProfilePicture: user.ProfilePicture, Bio: user.Bio}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	if err := users.DeleteById(id); err != nil {
		log.Print("Error deleting user: ", err)
		return false, err
	}

	return true, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, input model.Login) (string, error) {
	panic(fmt.Errorf("not implemented: Login - login"))
}

// RefreshToken is the resolver for the refreshToken field.
func (r *mutationResolver) RefreshToken(ctx context.Context, input model.RefreshTokenInput) (string, error) {
	panic(fmt.Errorf("not implemented: RefreshToken - refreshToken"))
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Me - me"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	user, err := users.GetUserByID(id)
	if err != nil {
		log.Print("Error fetching user: ", err)
		return nil, err
	}
	return &model.User{ID: user.ID, Name: user.Name, Email: user.Email, ProfilePicture: user.ProfilePicture, Bio: user.Bio}, nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
	allUsers, err := users.GetAllUsers()
	if err != nil {
		log.Print("Error fetching users: ", err)
		return nil, err
	}

	var result []*model.User
	for _, user := range allUsers {
		result = append(result, &model.User{
			ID:             user.ID,
			Name:           user.Name,
			Email:          user.Email,
			ProfilePicture: user.ProfilePicture,
			Bio:            user.Bio,
		})
	}

	return result, nil
}
