package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	"github.com/ut-sama-art-studio/art-market-backend/graph"
	"github.com/ut-sama-art-studio/art-market-backend/middlewares"
	"github.com/ut-sama-art-studio/art-market-backend/services/fileservice"
)

// MultipleUpload is the resolver for the multipleUpload field.
func (r *mutationResolver) MultipleUpload(ctx context.Context, files []*graphql.Upload) ([]string, error) {
	var fileURLs []string
	userID := middlewares.ContextUserID(ctx)

	for _, file := range files {
		fileURL, err := fileservice.UploadFileToS3(*file, userID, "")
		if err != nil {
			return nil, fmt.Errorf("failed to upload file: %w", err)
		}
		fileURLs = append(fileURLs, fileURL)
	}

	return fileURLs, nil
}

// SingleUpload is the resolver for the singleUpload field.
func (r *mutationResolver) SingleUpload(ctx context.Context, file graphql.Upload) (string, error) {
	userID := middlewares.ContextUserID(ctx)

	fileURL, err := fileservice.UploadFileToS3(file, userID, "")
	if err != nil {
		return "", fmt.Errorf("failed to upload single file: %w", err)
	}

	return fileURL, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
